package com.example.loginvaa;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.Navigator;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.TextField;

public class loginview extends CustomComponent  implements View,  Button.ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button loginbutton;
	@AutoGenerated
	private PasswordField passwordfield;
	@AutoGenerated
	private TextField usernamefield;
	
	//Referenz auf Navigator der UI anlegen
	Navigator navigator = LoginvaaUI.navigator;
	
    public loginview() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@Override
	public void enter(ViewChangeEvent event) {
		Notification.show("Willkommen! :)");
		// + String.valueOf(getSession().getAttribute("user")));
		//hiermit kann getestet werden, ob user nach einmaligen login wirklich aus der session entfernt wurde
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// usernamefield
		usernamefield = new TextField();
		usernamefield.setCaption("Benutzername:");
		usernamefield.setImmediate(false);
		usernamefield.setWidth("-1px");
		usernamefield.setHeight("-1px");
		mainLayout.addComponent(usernamefield, "top:36.0px;left:60.0px;");
		
		// passwordfield
		passwordfield = new PasswordField();
		passwordfield.setCaption("Passwort:");
		passwordfield.setImmediate(false);
		passwordfield.setWidth("-1px");
		passwordfield.setHeight("-1px");
		mainLayout.addComponent(passwordfield, "top:100.0px;left:60.0px;");
		
		// loginbutton
		loginbutton = new Button();
		loginbutton.setCaption("Login");
		loginbutton.setImmediate(true);
		loginbutton.setWidth("-1px");
		loginbutton.setHeight("-1px");
		
		//Login wird bei klick auf butten ausgefuehrt, ueber die validateData-Methode
		loginbutton.addClickListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				validateData();
			}
		});		
		
		
		mainLayout.addComponent(loginbutton, "top:140.0px;left:90.0px;");
		
		return mainLayout;
	}

	private void validateData() {

	    //Wenn button geklickt wird, ueberpruefen ob richtige daten eingegeben wurden
		//To DO: datenbankqueries verringern mit hilfe von einer "isvalid" funktion
	    
	    if( (usernamefield.getValue().equals("Simon")) && (passwordfield.getValue().equals("1234"))){
	        
	    	getSession().setAttribute("user", usernamefield.getValue());

	    	//Logindaten gueltig, neuen View anlegen:
	       navigator.addView("logged", new LoggedIn());
	       
	       //den User auf diesen View schicken:
	       navigator.navigateTo("logged");
	       
	       
	    } else {

			Notification.show("Falsche Daten, bitte neu eingeben! Danke!");

	        this.passwordfield.setValue("");
	        this.usernamefield.setValue("");
	    }
	}

	@Override
	public void buttonClick(ClickEvent event) {
		// TODO Auto-generated method stub

	}
	
}