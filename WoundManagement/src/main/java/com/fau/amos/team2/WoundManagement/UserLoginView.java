package com.fau.amos.team2.WoundManagement;


import java.util.List;

import com.fau.amos.team2.WoundManagement.model.Employee;
import com.fau.amos.team2.WoundManagement.provider.EmployeeProvider;
import com.fau.amos.team2.WoundManagement.provider.Environment;
import com.fau.amos.team2.WoundManagement.resources.MessageResources;
import com.fau.amos.team2.WoundManagement.subviews.NumericButtonField;
import com.vaadin.addon.touchkit.ui.NavigationView;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CssLayout;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnHeaderMode;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class UserLoginView extends NavigationView {
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private Button loginButton;
	@AutoGenerated
	private PasswordField passwordField;
	@AutoGenerated
	private TextField usernameField;
	private NumericButtonField passwordInput;
	final VerticalLayout fieldsandbutton = new VerticalLayout();

	private static EmployeeProvider employeeProvider = 
			EmployeeProvider.getInstance();

	/**
	 * Creates an instance of LoginView in order to login.
	 * 
	 * If user login correct creates a new View
	 * @see com.fau.amos.team2.WoundManagement.LoggedInView
	 */
	public UserLoginView() {
		GridLayout main = new GridLayout(2, 1);
		main.setSizeFull();
		main.setColumnExpandRatio(0, 0);
		main.setColumnExpandRatio(1, 0);
		
		CssLayout leftColumn = new CssLayout(fieldsandbutton);
		leftColumn.setWidth(400, Unit.PIXELS);
		
		fieldsandbutton.setSpacing(true);
		fieldsandbutton.setWidth(150, Unit.PIXELS);
		
		usernameField = new TextField();
		usernameField.setValue(""); //$NON-NLS-1$
		usernameField.setCaption(MessageResources.getString("username") + ":"); //$NON-NLS-1$
		usernameField.setVisible(false);
		
		fieldsandbutton.addComponent(usernameField);

		passwordField = new PasswordField();
		passwordField.setCaption(MessageResources.getString("PIN") + ":"); //$NON-NLS-1$
		passwordField.setValue(""); //$NON-NLS-1$
		
		fieldsandbutton.addComponent(passwordField);

		passwordInput = new NumericButtonField(passwordField);
		passwordInput.addEnterListener(validateClickListener);
		passwordInput.setBackListener(backListener);
		passwordInput.setSizeFull();
		
		fieldsandbutton.addComponent(passwordInput);
		fieldsandbutton.setVisible(false);

		// Die Buttons/Felder auf der linken Seite, das fieldsandbutton sind hinzugefuegt
		// jetzt fehlt noch die rechte Seite- optiongroup zum auswaehlen des
		// Nutzers
		// das eintippen der Daten im rechten Menue ist aber auch noch moeglich!

		// Datenbankabfrage, wieviele nutzer gibt es sowie referenz auf deren
		// IDs

		List<Employee> employees = employeeProvider.getAllItems();
		
		Panel tablePanel = new Panel();
		tablePanel.setHeight("100%");
		tablePanel.setWidth("300px");
		tablePanel.setImmediate(true);
		
		final Table table = new Table();
		table.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
		table.setSelectable(true);
		table.setImmediate(true);
		table.setNullSelectionAllowed(false);
		table.setSizeFull();
		tablePanel.setContent(table);
		
		Property[][] properties = new Property[employees.size()][1];
		
		table.addContainerProperty("username", String.class, null, null, null, null);
		
		// hinzufuegen der Employee items
		for (Employee employee : employees) {
			table.addItem(employee.getId());
			Item tableItem = table.getItem(employee.getId());

			properties[employees.indexOf(employee)][0] = tableItem.getItemProperty("username");
			properties[employees.indexOf(employee)][0].setValue(employee.getFirstName() + " " + employee.getLastName());
			
			table.getContainerDataSource().addItem(employee.getId());
		}
		
		table.sort(new Object[]{ "username" }, new boolean[]{ true });
		
		table.addValueChangeListener(new Property.ValueChangeListener() {

			@Override
			public void valueChange(
					com.vaadin.data.Property.ValueChangeEvent event) {
				Object id = table.getValue();
				if (id != null) {
					Employee employee = employeeProvider.getByID(id);
	
					String selectedloginname = employee.getAbbreviation();
					usernameField.setValue(selectedloginname);
					passwordField.focus();
					fieldsandbutton.setVisible(true);
				}
			}
		});

		main.addComponent(leftColumn);
		main.addComponent(tablePanel);
		
		main.setComponentAlignment(leftColumn, Alignment.TOP_CENTER);

		setContent(main);
	}
	
	private Button.ClickListener backListener = new ClickListener() {

		@Override
		public void buttonClick(ClickEvent event) {
			usernameField.setValue("");
			fieldsandbutton.setVisible(false);
		}
		
	};
	
	private Button.ClickListener validateClickListener = new ClickListener() {
		
		@Override
		public void buttonClick(ClickEvent event) {
			validateData();
		}
	};
	
	/**
	 * Validate user input with data in the database
	 * 
	 * @return true if user fits password in the database, false otherwise
	 */
	private void validateData() {
		String username = usernameField.getValue();
		String password = passwordField.getValue();
		
		Environment.INSTANCE.loginEmployee(username, password);
		boolean correctdata = Environment.INSTANCE.getCurrentEmployee() != null;
		
		//Falls korrekte daten:
		if (correctdata) {
			NavigationView next = new PatientSelectionView();
			getNavigationManager().navigateTo(next);
		} else {
			Notification.show(MessageResources.getString("incorrectData")); //$NON-NLS-1$

			this.passwordField.setValue(""); //$NON-NLS-1$
		}
	}

}